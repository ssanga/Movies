@page "/moviesModalwithapiservice/{ReturnUrl}/{MovieId}"
@page "/moviesModalwithapiservice/{MovieId}"
@using Movies.Server.Services
@inject NavigationManager NavigationManager

@inject IMoviesDataService _moviesDataService

@if (Movie == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Container>
        <div class="movies-modal">

            @*<EditForm Model="@Movie" OnValidSubmit="@SaveMovie">*@
            <EditForm Model="@Movie">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                <div class="form-group">
                    <label for="movie-name">Movie Name</label>
                    <input @bind-value="@Movie.Name" type="text" class="form-control movie-name" id="movie-name" />
                </div>

                <div class="form-group">
                    <label for="year">Year</label>
                    <input type="number" class="form-control" id="year" name="year" @bind-value="@Movie.Year" min="1800" max="3000">
                </div>

                <div class="form-group">
                    <label for="PortraitUrl">Url of the portrait</label>
                    <input @bind-value="@Movie.PortraitUrl" type="text" class="form-control" id="PortraitUrl" placeholder="The url of the portrait" />
                </div>

                <button @onclick="Cancel" class="btn btn-secondary mr-2">Cancel</button>

                @if (Movie.Id != 0)
                {
                    <button @onclick="Delete" class="btn btn-danger mr-2">Delete</button>
                }

                <button @onclick="SaveMovie" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </Container>

}
@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public string MovieId { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    //https://stackoverflow.com/questions/59948457/how-to-redirect-to-a-caller-in-a-razor-code-programmatically
    [Parameter] public string ReturnUrl { get; set; }
    public MoviesDto Movie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (MovieId == string.Empty)
        {
            Movie = new MoviesDto();
            Movie.Id = 0;
        }
        else
        {
            int id = Convert.ToInt32(MovieId);
            Movie = await _moviesDataService.GetByIdAsync(id);

            if (Movie == null)
            {
                Movie = new MoviesDto();
                Movie.Id = 0;
            }
        }
    }

    public async Task SaveMovie()
    {
        PopulatePortalUriDefault();

        if (Movie.Id == 0)
        {
            Movie = await _moviesDataService.Add(Movie);
        }
        else
        {
            await _moviesDataService.Update(Movie);
        }

        if (ModalInstance != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Ok<MoviesDto>(Movie));
        }
        else
        {
            //NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
        }

    }

    public async Task Delete()
    {

        var parameters = new ModalParameters();

        parameters.Add("Title", "Delete Movie");
        parameters.Add("Message", $"Do you want delete {Movie.Name}?");

        var formModal = Modal.Show<MsgBoxBlazor>("Delete Movie", parameters);
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await _moviesDataService.Delete(Movie.Id);
            StateHasChanged();

            if (ModalInstance != null)
            {
                await ModalInstance.CloseAsync(ModalResult.Ok<MoviesDto>(Movie));
            }
            else
            {
                //NavigationManager.NavigateTo("/");
                NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
            }
        }

    }

    public void Cancel()
    {
        PopulatePortalUriDefault();

        if (ModalInstance != null)
        {
            ModalInstance.CancelAsync();
        }
        else
        {
            //NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
        }

    }

    public void PopulatePortalUriDefault()
    {
        if (string.IsNullOrWhiteSpace(Movie.PortraitUrl)) Movie.PortraitUrl = "https://www.fostercity.org/sites/default/files/styles/gallery500/public/imageattachments/parksrec/page/10791/thursday_movie.png?itok=XakMswGX";
    }

}